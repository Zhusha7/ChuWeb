// <auto-generated />
using System;
using ChuWeb.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChuWeb.API.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20250401163924_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PostsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("PostCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = 2,
                            PostsId = 1
                        },
                        new
                        {
                            CategoriesId = 3,
                            PostsId = 2
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Experienced tech writer with a passion for web development.",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(4713),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Web developer and tech enthusiast.",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(4716),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            Username = "janesmith"
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5058),
                            Description = "Articles related to web development technologies and practices.",
                            IsDeleted = false,
                            Name = "Web Development",
                            Slug = "web-development"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5060),
                            Description = "Tutorials and articles about ASP.NET Core development.",
                            IsDeleted = false,
                            Name = "ASP.NET Core",
                            Slug = "aspnet-core"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5062),
                            Description = "Everything about React framework and best practices.",
                            IsDeleted = false,
                            Name = "React",
                            Slug = "react"
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great article! This helped me understand ASP.NET Core better.",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5222),
                            Email = "mike@example.com",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Mike Johnson",
                            PostId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "I've been using Vite for a while and it's fantastic!",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5224),
                            Email = "sarah@example.com",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Sarah Williams",
                            PostId = 2
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5271),
                            Email = "alice@example.com",
                            IsDeleted = false,
                            IsRead = false,
                            Message = "I really enjoyed your blog posts about ASP.NET Core. Looking forward to more content!",
                            Name = "Alice Johnson",
                            PhoneNumber = "555-123-4567",
                            Subject = "Website Feedback"
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "This is a comprehensive guide to getting started with ASP.NET Core MVC. ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-enabled, Internet-connected applications.",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5175),
                            IsDeleted = false,
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5169),
                            Slug = "getting-started-with-aspnet-core-mvc",
                            Summary = "Learn the basics of ASP.NET Core MVC in this introductory article.",
                            Title = "Getting Started with ASP.NET Core MVC"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "Vite is a modern build tool that significantly improves the frontend development experience. In this post, we'll explore how to build React applications using Vite and why it's a great alternative to Create React App.",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5178),
                            IsDeleted = false,
                            IsPublished = true,
                            PublishedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5177),
                            Slug = "building-react-applications-with-vite",
                            Summary = "Learn how to use Vite for faster React development.",
                            Title = "Building React Applications with Vite"
                        });
                });

            modelBuilder.Entity("ChuWeb.API.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5109),
                            IsDeleted = false,
                            Name = "C#",
                            Slug = "csharp"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5111),
                            IsDeleted = false,
                            Name = "JavaScript",
                            Slug = "javascript"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5113),
                            IsDeleted = false,
                            Name = "Entity Framework",
                            Slug = "entity-framework"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 1, 16, 39, 24, 553, DateTimeKind.Utc).AddTicks(5114),
                            IsDeleted = false,
                            Name = "React",
                            Slug = "react"
                        });
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTags", (string)null);

                    b.HasData(
                        new
                        {
                            PostsId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            PostsId = 1,
                            TagsId = 3
                        },
                        new
                        {
                            PostsId = 2,
                            TagsId = 2
                        },
                        new
                        {
                            PostsId = 2,
                            TagsId = 4
                        });
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("ChuWeb.API.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuWeb.API.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChuWeb.API.Models.Comment", b =>
                {
                    b.HasOne("ChuWeb.API.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChuWeb.API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ChuWeb.API.Models.Post", b =>
                {
                    b.HasOne("ChuWeb.API.Models.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("ChuWeb.API.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuWeb.API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChuWeb.API.Models.Author", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ChuWeb.API.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ChuWeb.API.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
